name: Build

on:
  push:
    branches: master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.8-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.8-
            pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install dependencies
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install ripgrep

          python -m pip install -U jupyterlab~=3.1 check-manifest

      - name: Build the extension
        run: |
          set -eux
          jlpm
          jlpm run eslint:check
          python -m pip install .[tests]

      - name: Linter check
        run: |
          set -eux
          python -m pre_commit run --all

      - name: Test
        run: |
          set -eux
          python -m pytest -vv -r ap --cov jupyterlab_search_replace

      - name: Check JupyterLab installation
        run: |
          set -eux
          jupyter server extension list
          jupyter server extension list 2>&1 | grep -ie "jupyterlab_search_replace.*OK"

          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "jupyterlab-search-replace.*OK"
          python -m jupyterlab.browser_check

      - name: Build package
        run: |
          set -eux
          check-manifest -v

          pip install build
          python -m build --sdist
          cp dist/*.tar.gz myextension.tar.gz
          pip uninstall -y myextension jupyterlab
          rm -rf myextension

      - uses: actions/upload-artifact@v2
        with:
          name: myextension-sdist
          path: myextension.tar.gz

  test_isolated:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - uses: actions/download-artifact@v2
        with:
          name: myextension-sdist
      - name: Install and Test
        run: |
          set -eux
          # Remove NodeJS, twice to take care of system and locally installed node versions.
          sudo rm -rf $(which node)
          sudo rm -rf $(which node)
          pip install myextension.tar.gz
          pip install jupyterlab
          jupyter labextension list 2>&1 | grep -ie "search-replace.*OK"
          python -m jupyterlab.browser_check --no-chrome-test
  
  integration-tests:
    name: Integration tests
    needs: build
    runs-on: ubuntu-latest

    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Download extension package
        uses: actions/download-artifact@v2
        with:
          name: myextension-sdist
        
      - name: Install the extension
        run: |
          set -eux
          python -m pip install "jupyterlab~=3.1" myextension.tar.gz

      - name: Install dependencies
        working-directory: ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install
      - name: Set up browser cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}
      - name: Install browser
        run: jlpm playwright install chromium
        working-directory: ui-tests

      - name: Execute integration tests
        working-directory: ui-tests
        run: |
          jlpm playwright test

      - name: Upload Playwright Test report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: search-replace-playwright-tests
          path: |
            ui-tests/test-results
            ui-tests/playwright-report
